{
  "uid" : "909e8c14394f5f67",
  "name" : "test_1021_log",
  "fullName" : "vizsgaremek_tests.test_1021_log#test_1021_log",
  "historyId" : "b9162e341abfd4c475daf908a38a7ce5",
  "time" : {
    "start" : 1629290515383,
    "stop" : 1629290533634,
    "duration" : 18251
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert ('Login failed!' == 'Login failed!'\n    Login failed! and 'Invalid user credentials.' == 'Password field required.'\n  - Password field required.\n  + Invalid user credentials.)",
  "statusTrace" : "def test_1021_log():\n        options = Options()\n        options.headless = True\n    \n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')\n    \n        driver.get(\"http://localhost:1667\")\n    \n        cookie_accept_button = driver.find_element_by_xpath(\"//div[@class='cookie__bar__buttons']/button[2]\")\n        cookie_accept_button.click()\n    \n        sign_in_link = driver.find_element_by_xpath(\"//*[@id='app']/nav/div/ul/li[2]/a\")\n        sign_in_link.click()\n        time.sleep(2)\n    \n        def user_login(email, password):\n            e_mail = driver.find_element_by_xpath(\"//form/fieldset[1]/input\")\n            pass_word = driver.find_element_by_xpath(\"//form/fieldset[2]/input\")\n            sign_in_button = driver.find_element_by_xpath('//*[@id=\"app\"]/div/div/div/div/form/button')\n    \n            e_mail.clear()\n            pass_word.clear()\n            e_mail.send_keys(email)\n            pass_word.send_keys(password)\n            time.sleep(3)\n            sign_in_button.click()\n    \n        def assert_handling(expected_title, expected_text):\n            swal_title = driver.find_element_by_class_name(\"swal-title\").text\n            swal_text = driver.find_element_by_class_name(\"swal-text\").text\n            assert (swal_title == expected_title and swal_text == expected_text)\n    \n        def back_to_form():  # acknowledging error/getting sign up form back\n            ok_button = driver.find_element_by_class_name(\"swal-button\")\n            ok_button.click()\n    \n        # generating random test data\n    \n        numeric_part = \"\".join([random.choice(string.digits) for _ in range(2)])\n        lowercase_part = \"\".join([random.choice(string.ascii_lowercase) for _ in range(4)])\n        uppercase_part = \"\".join([random.choice(string.ascii_uppercase) for _ in range(4)])\n        special_part = \"\".join([random.choice(string.punctuation) for _ in range(2)])\n    \n        rnd_un = \"\".join([random.choice(string.ascii_lowercase) for _ in range(5)])\n        rnd_em = rnd_un + \"@\" + lowercase_part + \".com\"\n    \n        # blank input fields\n    \n        user_login(\"\", \"\")\n        time.sleep(2)\n        assert_handling(\"Login failed!\", \"Email field required.\")\n        time.sleep(2)\n        back_to_form()\n    \n        # missing password test fails\n        time.sleep(2)\n        user_login(rnd_em, \"\")\n        time.sleep(2)\n>       assert_handling(\"Login failed!\", \"Password field required.\")\n\nvizsgaremek_tests/test_1021_log.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected_title = 'Login failed!', expected_text = 'Password field required.'\n\n    def assert_handling(expected_title, expected_text):\n        swal_title = driver.find_element_by_class_name(\"swal-title\").text\n        swal_text = driver.find_element_by_class_name(\"swal-text\").text\n>       assert (swal_title == expected_title and swal_text == expected_text)\nE       AssertionError: assert ('Login failed!' == 'Login failed!'\nE           Login failed! and 'Invalid user credentials.' == 'Password field required.'\nE         - Password field required.\nE         + Invalid user credentials.)\n\nvizsgaremek_tests/test_1021_log.py:46: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert ('Login failed!' == 'Login failed!'\n    Login failed! and 'Invalid user credentials.' == 'Password field required.'\n  - Password field required.\n  + Invalid user credentials.)",
    "statusTrace" : "def test_1021_log():\n        options = Options()\n        options.headless = True\n    \n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')\n    \n        driver.get(\"http://localhost:1667\")\n    \n        cookie_accept_button = driver.find_element_by_xpath(\"//div[@class='cookie__bar__buttons']/button[2]\")\n        cookie_accept_button.click()\n    \n        sign_in_link = driver.find_element_by_xpath(\"//*[@id='app']/nav/div/ul/li[2]/a\")\n        sign_in_link.click()\n        time.sleep(2)\n    \n        def user_login(email, password):\n            e_mail = driver.find_element_by_xpath(\"//form/fieldset[1]/input\")\n            pass_word = driver.find_element_by_xpath(\"//form/fieldset[2]/input\")\n            sign_in_button = driver.find_element_by_xpath('//*[@id=\"app\"]/div/div/div/div/form/button')\n    \n            e_mail.clear()\n            pass_word.clear()\n            e_mail.send_keys(email)\n            pass_word.send_keys(password)\n            time.sleep(3)\n            sign_in_button.click()\n    \n        def assert_handling(expected_title, expected_text):\n            swal_title = driver.find_element_by_class_name(\"swal-title\").text\n            swal_text = driver.find_element_by_class_name(\"swal-text\").text\n            assert (swal_title == expected_title and swal_text == expected_text)\n    \n        def back_to_form():  # acknowledging error/getting sign up form back\n            ok_button = driver.find_element_by_class_name(\"swal-button\")\n            ok_button.click()\n    \n        # generating random test data\n    \n        numeric_part = \"\".join([random.choice(string.digits) for _ in range(2)])\n        lowercase_part = \"\".join([random.choice(string.ascii_lowercase) for _ in range(4)])\n        uppercase_part = \"\".join([random.choice(string.ascii_uppercase) for _ in range(4)])\n        special_part = \"\".join([random.choice(string.punctuation) for _ in range(2)])\n    \n        rnd_un = \"\".join([random.choice(string.ascii_lowercase) for _ in range(5)])\n        rnd_em = rnd_un + \"@\" + lowercase_part + \".com\"\n    \n        # blank input fields\n    \n        user_login(\"\", \"\")\n        time.sleep(2)\n        assert_handling(\"Login failed!\", \"Email field required.\")\n        time.sleep(2)\n        back_to_form()\n    \n        # missing password test fails\n        time.sleep(2)\n        user_login(rnd_em, \"\")\n        time.sleep(2)\n>       assert_handling(\"Login failed!\", \"Password field required.\")\n\nvizsgaremek_tests/test_1021_log.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected_title = 'Login failed!', expected_text = 'Password field required.'\n\n    def assert_handling(expected_title, expected_text):\n        swal_title = driver.find_element_by_class_name(\"swal-title\").text\n        swal_text = driver.find_element_by_class_name(\"swal-text\").text\n>       assert (swal_title == expected_title and swal_text == expected_text)\nE       AssertionError: assert ('Login failed!' == 'Login failed!'\nE           Login failed! and 'Invalid user credentials.' == 'Password field required.'\nE         - Password field required.\nE         + Invalid user credentials.)\n\nvizsgaremek_tests/test_1021_log.py:46: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bdce69b0fa4f4b77",
      "name" : "log",
      "source" : "bdce69b0fa4f4b77.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "333d2e97d2b3d9a4",
      "name" : "stderr",
      "source" : "333d2e97d2b3d9a4.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "vizsgaremek_tests"
  }, {
    "name" : "suite",
    "value" : "test_1021_log"
  }, {
    "name" : "host",
    "value" : "fv-az33-581"
  }, {
    "name" : "thread",
    "value" : "3903-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "vizsgaremek_tests.test_1021_log"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "9ae04dd863c2417b",
        "reportUrl" : "https://zibinova.github.io/conduit/14//#testresult/9ae04dd863c2417b",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert ('Login failed!' == 'Login failed!'\n    Login failed! and 'Invalid user credentials.' == 'Password field required.'\n  - Password field required.\n  + Invalid user credentials.)",
        "time" : {
          "start" : 1629008099820,
          "stop" : 1629008117147,
          "duration" : 17327
        }
      }, {
        "uid" : "864260bc9f2ff474",
        "reportUrl" : "https://zibinova.github.io/conduit/85//#testresult/864260bc9f2ff474",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert ('Login failed!' == 'Login failed!'\n    Login failed! and 'Invalid user credentials.' == 'Password field required.'\n  - Password field required.\n  + Invalid user credentials.)",
        "time" : {
          "start" : 1629008074615,
          "stop" : 1629008093074,
          "duration" : 18459
        }
      }, {
        "uid" : "f82bb9821a7e1169",
        "reportUrl" : "https://zibinova.github.io/conduit/13//#testresult/f82bb9821a7e1169",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert ('Login failed!' == 'Login failed!'\n    Login failed! and 'Invalid user credentials.' == 'Password field required.'\n  - Password field required.\n  + Invalid user credentials.)",
        "time" : {
          "start" : 1628971334105,
          "stop" : 1628971352327,
          "duration" : 18222
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "909e8c14394f5f67.json",
  "parameterValues" : [ ]
}