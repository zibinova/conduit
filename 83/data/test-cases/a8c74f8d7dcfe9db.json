{
  "uid" : "a8c74f8d7dcfe9db",
  "name" : "test_1000_policy",
  "fullName" : "vizsgaremek_tests.test_1000_policy#test_1000_policy",
  "historyId" : "c6f3f628637e1e4ece769f84f117e4c1",
  "time" : {
    "start" : 1628971066499,
    "stop" : 1628971086979,
    "duration" : 20480
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert not True\n +  where True = <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>>()\n +    where <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>> = <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>.is_displayed\n +      where <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")> = <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>>('cookie-policy-panel')\n +        where <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>> = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>.find_element_by_id",
  "statusTrace" : "def test_1000_policy():\n    \n        options = Options()\n        options.headless = True\n    \n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')\n    \n        driver.get(\"http://localhost:1667\")\n        time.sleep(2)\n        assert driver.find_element_by_id('cookie-policy-panel').is_displayed()\n        time.sleep(2)\n        cookie_accept_button = driver.find_element_by_xpath(\"//div[@class='cookie__bar__buttons']/button[2]\")\n        cookie_accept_button.click()\n        time.sleep(2)\n    \n        assert not len(driver.find_elements_by_id('cookie-policy-panel'))\n    \n        driver.close()\n    \n        # reopen browser\n    \n        options = Options()\n        options.headless = True\n        # In order for ChromeDriverManager to work you must pip install it in your own environment.\n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        URL = \"http://localhost:1667\"\n        driver.get(URL)\n        time.sleep(3)\n    \n>       assert not driver.find_element_by_id('cookie-policy-panel').is_displayed()\nE       assert not True\nE        +  where True = <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>>()\nE        +    where <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>> = <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>.is_displayed\nE        +      where <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")> = <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>>('cookie-policy-panel')\nE        +        where <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>> = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>.find_element_by_id\n\nvizsgaremek_tests/test_1000_policy.py:46: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert not True\n +  where True = <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>>()\n +    where <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>> = <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>.is_displayed\n +      where <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")> = <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>>('cookie-policy-panel')\n +        where <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>> = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>.find_element_by_id",
    "statusTrace" : "def test_1000_policy():\n    \n        options = Options()\n        options.headless = True\n    \n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')\n    \n        driver.get(\"http://localhost:1667\")\n        time.sleep(2)\n        assert driver.find_element_by_id('cookie-policy-panel').is_displayed()\n        time.sleep(2)\n        cookie_accept_button = driver.find_element_by_xpath(\"//div[@class='cookie__bar__buttons']/button[2]\")\n        cookie_accept_button.click()\n        time.sleep(2)\n    \n        assert not len(driver.find_elements_by_id('cookie-policy-panel'))\n    \n        driver.close()\n    \n        # reopen browser\n    \n        options = Options()\n        options.headless = True\n        # In order for ChromeDriverManager to work you must pip install it in your own environment.\n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        URL = \"http://localhost:1667\"\n        driver.get(URL)\n        time.sleep(3)\n    \n>       assert not driver.find_element_by_id('cookie-policy-panel').is_displayed()\nE       assert not True\nE        +  where True = <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>>()\nE        +    where <bound method WebElement.is_displayed of <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>> = <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")>.is_displayed\nE        +      where <selenium.webdriver.remote.webelement.WebElement (session=\"9d45cf95736626f840bd9eed32f2d3b6\", element=\"df40b9fa-9bcc-4cc6-aaa3-d3a4f830bc95\")> = <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>>('cookie-policy-panel')\nE        +        where <bound method WebDriver.find_element_by_id of <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>> = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d45cf95736626f840bd9eed32f2d3b6\")>.find_element_by_id\n\nvizsgaremek_tests/test_1000_policy.py:46: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f85e00358862262a",
      "name" : "log",
      "source" : "f85e00358862262a.txt",
      "type" : "text/plain",
      "size" : 987
    }, {
      "uid" : "fec782c22d053b42",
      "name" : "stderr",
      "source" : "fec782c22d053b42.txt",
      "type" : "text/plain",
      "size" : 650
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "vizsgaremek_tests"
  }, {
    "name" : "suite",
    "value" : "test_1000_policy"
  }, {
    "name" : "host",
    "value" : "fv-az42-898"
  }, {
    "name" : "thread",
    "value" : "3771-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "vizsgaremek_tests.test_1000_policy"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a8c74f8d7dcfe9db.json",
  "parameterValues" : [ ]
}