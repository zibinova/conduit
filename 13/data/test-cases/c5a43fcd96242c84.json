{
  "uid" : "c5a43fcd96242c84",
  "name" : "test_reg_1014_15",
  "fullName" : "vizsgaremek_tests.test_1014_15_reg#test_reg_1014_15",
  "historyId" : "ef035eb736c9e05b6a32c3525b32f821",
  "time" : {
    "start" : 1628971310958,
    "stop" : 1628971324012,
    "duration" : 13054
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert ('Welcome!' == 'Registration failed!'\n  - Registration failed!\n  + Welcome!)",
  "statusTrace" : "def test_reg_1014_15():\n        from selenium import webdriver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium.webdriver.support import expected_conditions as EC\n        from webdriver_manager.chrome import ChromeDriverManager\n        from selenium.webdriver.chrome.options import Options\n        import time\n        import random\n        import string\n    \n        options = Options()\n        options.headless = True\n    \n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')\n    \n        driver.get(\"http://localhost:1667\")\n    \n        # giving cookie consent\n        cookie_accept_button = driver.find_element_by_xpath(\"//div[@class='cookie__bar__buttons']/button[2]\")\n        cookie_accept_button.click()\n    \n    \n        def user_registration(username, email, password):\n            user_name = driver.find_element_by_xpath(\"//form/fieldset[1]/input\")\n            e_mail = driver.find_element_by_xpath(\"//form/fieldset[2]/input\")\n            pass_word = driver.find_element_by_xpath(\"//form/fieldset[3]/input\")\n            sign_up_button = driver.find_element_by_xpath('//form/button')\n    \n            user_name.send_keys(username)\n            e_mail.send_keys(email)\n            pass_word.send_keys(password)\n            time.sleep(3)\n            sign_up_button.click()\n    \n    \n        def assert_handling(expected_title, expected_text):\n            WebDriverWait(driver, 10).until(\n                EC.visibility_of_element_located((By.XPATH, \"//div[@class='swal-title']\")))\n    \n            swal_title = driver.find_element_by_xpath(\"//div[@class='swal-title']\").text\n            swal_text = driver.find_element_by_class_name(\"swal-text\").text\n            assert (swal_title == expected_title and swal_text == expected_text)\n    \n    \n        def back_to_form():  # acknowledging error/getting sign up form back\n            ok_button = driver.find_element_by_class_name(\"swal-button\")\n            ok_button.click()\n    \n        # generating random test data\n    \n    \n        numeric_part = \"\".join([random.choice(string.digits) for _ in range(2)])\n        lowercase_part = \"\".join([random.choice(string.ascii_lowercase) for _ in range(4)])\n        uppercase_part = \"\".join([random.choice(string.ascii_uppercase) for _ in range(4)])\n        special_part = \"\".join([random.choice(string.punctuation) for _ in range(2)])\n        rnd_un = \"\".join([random.choice(string.ascii_lowercase) for _ in range(5)])\n        rnd_em = rnd_un + \"@\" + lowercase_part + \".com\"\n        rnd_pw = numeric_part + lowercase_part + uppercase_part + special_part\n    \n        # getting sign-up form\n    \n        sign_up_link = driver.find_element_by_xpath(\"//ul/li[3]/a\")\n        sign_up_link.click()\n        time.sleep(3)\n    \n        user_registration(\"testella\", \"testella@gmail.com\", \"Teszt123\")\n        time.sleep(5)\n>       assert_handling(\"Registration failed!\", \"Email already taken.\")\n\nvizsgaremek_tests/test_1014_15_reg.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected_title = 'Registration failed!', expected_text = 'Email already taken.'\n\n    def assert_handling(expected_title, expected_text):\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//div[@class='swal-title']\")))\n    \n        swal_title = driver.find_element_by_xpath(\"//div[@class='swal-title']\").text\n        swal_text = driver.find_element_by_class_name(\"swal-text\").text\n>       assert (swal_title == expected_title and swal_text == expected_text)\nE       AssertionError: assert ('Welcome!' == 'Registration failed!'\nE         - Registration failed!\nE         + Welcome!)\n\nvizsgaremek_tests/test_1014_15_reg.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert ('Welcome!' == 'Registration failed!'\n  - Registration failed!\n  + Welcome!)",
    "statusTrace" : "def test_reg_1014_15():\n        from selenium import webdriver\n        from selenium.webdriver.common.by import By\n        from selenium.webdriver.support.ui import WebDriverWait\n        from selenium.webdriver.support import expected_conditions as EC\n        from webdriver_manager.chrome import ChromeDriverManager\n        from selenium.webdriver.chrome.options import Options\n        import time\n        import random\n        import string\n    \n        options = Options()\n        options.headless = True\n    \n        # driver = webdriver.Chrome(ChromeDriverManager().install())\n        driver = webdriver.Chrome(ChromeDriverManager().install(), options=options)  # headless mode\n    \n        # options.add_argument('--headless')\n        # options.add_argument('--disable-gpu')\n    \n        driver.get(\"http://localhost:1667\")\n    \n        # giving cookie consent\n        cookie_accept_button = driver.find_element_by_xpath(\"//div[@class='cookie__bar__buttons']/button[2]\")\n        cookie_accept_button.click()\n    \n    \n        def user_registration(username, email, password):\n            user_name = driver.find_element_by_xpath(\"//form/fieldset[1]/input\")\n            e_mail = driver.find_element_by_xpath(\"//form/fieldset[2]/input\")\n            pass_word = driver.find_element_by_xpath(\"//form/fieldset[3]/input\")\n            sign_up_button = driver.find_element_by_xpath('//form/button')\n    \n            user_name.send_keys(username)\n            e_mail.send_keys(email)\n            pass_word.send_keys(password)\n            time.sleep(3)\n            sign_up_button.click()\n    \n    \n        def assert_handling(expected_title, expected_text):\n            WebDriverWait(driver, 10).until(\n                EC.visibility_of_element_located((By.XPATH, \"//div[@class='swal-title']\")))\n    \n            swal_title = driver.find_element_by_xpath(\"//div[@class='swal-title']\").text\n            swal_text = driver.find_element_by_class_name(\"swal-text\").text\n            assert (swal_title == expected_title and swal_text == expected_text)\n    \n    \n        def back_to_form():  # acknowledging error/getting sign up form back\n            ok_button = driver.find_element_by_class_name(\"swal-button\")\n            ok_button.click()\n    \n        # generating random test data\n    \n    \n        numeric_part = \"\".join([random.choice(string.digits) for _ in range(2)])\n        lowercase_part = \"\".join([random.choice(string.ascii_lowercase) for _ in range(4)])\n        uppercase_part = \"\".join([random.choice(string.ascii_uppercase) for _ in range(4)])\n        special_part = \"\".join([random.choice(string.punctuation) for _ in range(2)])\n        rnd_un = \"\".join([random.choice(string.ascii_lowercase) for _ in range(5)])\n        rnd_em = rnd_un + \"@\" + lowercase_part + \".com\"\n        rnd_pw = numeric_part + lowercase_part + uppercase_part + special_part\n    \n        # getting sign-up form\n    \n        sign_up_link = driver.find_element_by_xpath(\"//ul/li[3]/a\")\n        sign_up_link.click()\n        time.sleep(3)\n    \n        user_registration(\"testella\", \"testella@gmail.com\", \"Teszt123\")\n        time.sleep(5)\n>       assert_handling(\"Registration failed!\", \"Email already taken.\")\n\nvizsgaremek_tests/test_1014_15_reg.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected_title = 'Registration failed!', expected_text = 'Email already taken.'\n\n    def assert_handling(expected_title, expected_text):\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//div[@class='swal-title']\")))\n    \n        swal_title = driver.find_element_by_xpath(\"//div[@class='swal-title']\").text\n        swal_text = driver.find_element_by_class_name(\"swal-text\").text\n>       assert (swal_title == expected_title and swal_text == expected_text)\nE       AssertionError: assert ('Welcome!' == 'Registration failed!'\nE         - Registration failed!\nE         + Welcome!)\n\nvizsgaremek_tests/test_1014_15_reg.py:50: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c973208131a932da",
      "name" : "log",
      "source" : "c973208131a932da.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "4c850009951539ba",
      "name" : "stderr",
      "source" : "4c850009951539ba.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "vizsgaremek_tests"
  }, {
    "name" : "suite",
    "value" : "test_1014_15_reg"
  }, {
    "name" : "host",
    "value" : "fv-az33-581"
  }, {
    "name" : "thread",
    "value" : "3733-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "vizsgaremek_tests.test_1014_15_reg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c5a43fcd96242c84.json",
  "parameterValues" : [ ]
}